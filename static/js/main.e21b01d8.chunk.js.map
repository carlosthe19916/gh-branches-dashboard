{"version":3,"sources":["logo.svg","brand.svg","PresentationalComponents/Pages/PageForbidden403/PageForbidden403.tsx","SmartComponents/SearchRepository/SearchRepository.tsx","SmartComponents/SearchRepository/index.ts","PresentationalComponents/Pages/PageHome/PageHome.tsx","store/alert/actions.tsx","api/apiClient.tsx","store/contextRepository/actions.tsx","api/githubClient.tsx","store/contextRepository/reducer.tsx","store/contextRepository/selectors.tsx","SmartComponents/ContextRepositoryLoader/ContextRepositoryLoader.tsx","SmartComponents/ContextRepositoryLoader/index.tsx","store/repoBranches/actions.tsx","store/repoBranches/reducer.tsx","store/repoBranches/selectors.tsx","store/branchCommits/actions.tsx","store/branchCommits/reducer.tsx","store/branchCommits/selectors.tsx","store/branchComparison/actions.tsx","store/branchComparison/reducer.tsx","store/branchComparison/selectors.tsx","SmartComponents/BranchComparisonWrapper/BranchComparisonWrapper.tsx","SmartComponents/BranchComparisonWrapper/index.tsx","SmartComponents/BranchBoard/BranchBoard.tsx","SmartComponents/BranchBoard/index.tsx","SmartComponents/BranchesBoard/BranchesBoard.tsx","SmartComponents/BranchesBoard/index.tsx","PresentationalComponents/Pages/PageBranches/PageBranches.tsx","Utils/Utils.ts","Routes.tsx","PresentationalComponents/Layout/ButtonAboutProject/ButtonAboutProject.tsx","SmartComponents/NavLinkBranches/index.ts","SmartComponents/NavLinkBranches/NavLinkBranches.tsx","PresentationalComponents/Layout/PageNav/PageNav.tsx","PresentationalComponents/Layout/HeaderProject/HeaderProject.tsx","PresentationalComponents/Layout/HorizontaLayout/HorizontalLayout.tsx","SmartComponents/DeleteDialog/DeleteDialog.tsx","store/deleteDialog/actions.ts","store/deleteDialog/reducer.ts","store/deleteDialog/selectors.ts","SmartComponents/DeleteDialog/index.tsx","App.tsx","serviceWorker.ts","store/rootReducer.tsx","api/apiInit.tsx","index.tsx","store/index.tsx"],"names":["module","exports","PageForbidden403","children","PageSection","Bullseye","EmptyState","variant","EmptyStateVariant","full","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","gitRegex","exampleRepoUrl","withRouter","history","React","repoUrl","setRepoUrl","validUrl","setValidUrl","changeRepoUrl","url","test","GithubIcon","className","TextInput","id","type","value","onChange","aria-label","EmptyStateBody","Button","iconPosition","onClick","repoFullName","replace","split","push","isDisabled","PageHome","addNotification","require","alertFetchEndpoint","title","err","message","response","data","undefined","dispatch","description","dismissable","BackendAPIClient","path","body","method","config","axios","request","Object","assign","this","fetchContextRepositoryRequest","createAction","fetchContextRepositorySuccess","fetchContextRepositoryFailure","setDefaultBranchContextRepository","fetchContextRepository","meta","ApiClient","get","getRepo","then","res","catch","defaultState","repository","error","fetchStatus","defaultBranch","repositoryState","state","ContextRepositoryLoader","renderMessage","reloadCurrentPage","window","location","reload","renderError","props","large","CloudRainIcon","ButtonVariant","primary","fetchCtxRepository","ctxRepositoryError","ctxRepositoryFetchStatus","Fragment","Component","mapStateToProps","contextRepositorySelectors","mapDispatchToProps","contextRepositoryActions","connect","fetchRepoBranchesRequest","fetchRepoBranchesSuccess","fetchRepoBranchesFailure","fetchRepoBranches","getRepoBranches","byId","Map","errors","selectRepoBranches","selectFetchStatus","selectError","fetchBranchCommitsRequest","fetchBranchCommitsSuccess","fetchBranchCommitsFailure","fetchBranchCommits","branchName","branch","getRepoBranchCommits","getIdQuery","branchCommitsState","selectBranchCommits","selectBranchCommitsFetchStatus","selectBranchCommitsError","fetchBranchComparisonRequest","fetchBranchComparisonSuccess","fetchBranchComparisonFailure","fetchBranchComparison","branch1","branch2","getRepoBranchComparison","branchName1","branchName2","branchComparisonState","selectBranchComparison","selectBranchComparisonFetchStatus","selectBranchComparisonError","BranchComparisonWrapper","repo","branchBase","branchToCompare","full_name","name","branchComparison","branchComparisonFechStatus","Skeleton","width","height","animation","Array","apply","behind_by","map","c","i","key","aria-hidden","style","whiteSpace","ownProps","branchComparisonSelectors","branchComparisonError","branchComparisonActions","BranchesBoard","BranchBoard","repoDefaultBranch","branchCommits","sha","Box","component","textOverflow","overflow","href","html_url","target","rel","commit","branchCommitsSelectors","branchCommitsFechStatus","branchCommitsError","branchCommitsActions","fetchBranches","ctxRepo","_prevProps","cxtRepoBranches","setDefaultBranchCtxRepository","ctxRepoDefaultBranch","find","elem","default_branch","ctxRepoBranchesFechStatus","userDefinedBranchOrder","branches","sort","a","b","aIndex","findIndex","p","bIndex","localeCompare","Flex","e","FlexItem","Card","CardBody","element","ctxRepository","repoBranchesSelectors","ctxRepoBranchesError","repoBranchesActions","PageBranches","owner","match","params","queryParams","branchOrderQueryParam","branchOrder","result","isArray","extractBranchOrderQueryParam","queryString","parse","search","PageSectionVariants","light","TextContent","Text","AppRoutes","render","to","ButtonAboutProject","toggleButton","setState","isOpen","plain","AboutModal","onClose","trademark","brandImageSrc","brandImage","brandImageAlt","productName","TextList","TextListItem","activeClassName","PageNav","Nav","NavList","NavVariants","horizontal","NavItem","HeaderProject","renderPageToolbar","aboutButton","Toolbar","ToolbarGroup","css","accessibleStyles","screenReader","visibleOnLg","ToolbarItem","PageHeader","logo","Brand","src","navBrandImage","alt","toolbar","topNav","HorizontalLayout","renderAboutButton","pageId","PageSkipToContent","SkipToContent","Page","header","skipToContent","mainContainerId","DeleteDialogBase","onDelete","onCancel","isProcessing","isError","Modal","isSmall","actions","danger","link","openModal","closeModal","processing","deleteDialogState","deleteDialogSelectors","deleteDialogActions","frontendComponentsNotifications","App","NotificationsPortal","basename","process","Boolean","hostname","rootReducer","combineReducers","notifications","action","getType","payload","set","defaults","baseURL","ReactDOM","store","createStore","composeWithDevTools","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e21b01d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/brand.8daf3f5b.svg\";","import * as React from \"react\";\nimport {\n  PageSection,\n  Bullseye,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon\n} from \"@patternfly/react-core\";\nimport { LockIcon } from \"@patternfly/react-icons\";\n\nexport const PageForbidden403: React.FC = ({ children }) => {\n  return (\n    <React.Fragment>\n      <PageSection>\n        <Bullseye>\n          <EmptyState variant={EmptyStateVariant.full}>\n            <EmptyStateIcon icon={LockIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Error 403 Forbidden! The web page (or other resource) that you're\n              trying to open in your web browser is a resource that you're not\n              allowed to access.\n            </Title>\n            {children}\n          </EmptyState>\n        </Bullseye>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateVariant,\n  TextInput,\n  EmptyStateBody,\n  Button\n} from \"@patternfly/react-core\";\nimport { GithubIcon, LevelUpAltIcon } from \"@patternfly/react-icons\";\nimport { AppRouterProps } from \"../../models/routerProps\";\n\nvar gitRegex = /(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\.git)$/;\nconst exampleRepoUrl = \"https://github.com/project-xavier/xavier-ui.git\";\n\ninterface Props extends AppRouterProps {}\n\nexport const SearchRepository: React.FC<Props> = ({ history }) => {\n  const [repoUrl, setRepoUrl] = React.useState(\"\");\n  const [validUrl, setValidUrl] = React.useState(false);\n\n  const handleRepoUrlTextInputChange = (value: string) => {\n    changeRepoUrl(value);\n  };\n\n  const handleSelectExampleRepoUrl = () => {\n    changeRepoUrl(exampleRepoUrl);\n  };\n\n  const changeRepoUrl = (url: string) => {\n    setRepoUrl(url);\n    setValidUrl(gitRegex.test(url));\n  };\n\n  const handlePrimaryButtonClick = () => {\n    const repoFullName: string[] = repoUrl\n      .replace(\"https://github.com/\", \"\")\n      .replace(\".git\", \"\")\n      .split(\"/\");\n\n    history.push(`/monitor/${repoFullName[0]}/${repoFullName[1]}/branches`);\n  };\n\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={GithubIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        <div className=\"pf-l-split ins-c-conditional-filter\">\n          <div className=\"pf-l-split__item pf-m-fill\">\n            <TextInput\n              id=\"find-repository\"\n              type=\"text\"\n              value={repoUrl}\n              onChange={handleRepoUrlTextInputChange}\n              className=\"ins-c-conditional-filter\"\n              aria-label=\"search repository input text\"\n            />\n          </div>\n        </div>\n      </Title>\n      <EmptyStateBody>\n        Paste your repository URL and then click in the button below.\n        <Button\n          variant=\"link\"\n          icon={<LevelUpAltIcon />}\n          iconPosition=\"right\"\n          onClick={handleSelectExampleRepoUrl}\n        >\n          {exampleRepoUrl}\n        </Button>\n      </EmptyStateBody>\n      <Button\n        variant=\"primary\"\n        onClick={handlePrimaryButtonClick}\n        isDisabled={!validUrl}\n      >\n        Find and monitor\n      </Button>\n    </EmptyState>\n  );\n};\n","import { SearchRepository } from \"./SearchRepository\";\nimport { withRouter } from \"react-router-dom\";\n\nexport default withRouter(SearchRepository);\n","import * as React from \"react\";\nimport { PageSection, Bullseye } from \"@patternfly/react-core\";\nimport SearchRepository from \"../../../SmartComponents/SearchRepository\";\n\nexport interface PageHomeProps {}\n\nexport const PageHome: React.FC<PageHomeProps> = () => {\n  return (\n    <React.Fragment>\n      <PageSection>\n        <Bullseye>\n          <SearchRepository />\n        </Bullseye>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n","import { Dispatch } from \"redux\";\nimport { AlertModel } from \"../../models/alert\";\nimport { AxiosError } from \"axios\";\n\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\nconst addNotification = frontendComponentsNotifications.addNotification;\n\nexport const alert = (alert: AlertModel) => {\n  return (dispatch: Dispatch) => {\n    dispatch(addNotification(alert));\n  };\n};\n\nexport const alertFetchEndpoint = (title: string, err: AxiosError) => {\n  const message = err.response ? err.response.data.message : undefined;\n  return (dispatch: Dispatch) => {\n    dispatch(\n      addNotification({\n        variant: \"danger\",\n        title: title,\n        description: message ? message : err.message,\n        dismissable: true\n      })\n    );\n  };\n};\n","import axios, { AxiosPromise } from \"axios\";\n\nclass BackendAPIClient {\n  public static request<T>(\n    path: string,\n    body: any = null,\n    method:\n      | \"get\"\n      | \"post\"\n      | \"put\"\n      | \"delete\"\n      | \"options\"\n      | \"patch\"\n      | undefined = \"get\",\n    config = {}\n  ): AxiosPromise<T> {\n    return axios.request<T>(\n      Object.assign(\n        {},\n        {\n          url: path,\n          method,\n          data: body\n        },\n        config\n      )\n    );\n  }\n\n  public static post<T>(path: string, body: any, config = {}): AxiosPromise<T> {\n    return this.request<T>(path, body, \"post\", config);\n  }\n\n  public static put<T>(path: string, body: any, config = {}): AxiosPromise<T> {\n    return this.request<T>(path, body, \"put\", config);\n  }\n\n  public static get<T>(path: string): AxiosPromise<T> {\n    return this.request<T>(path);\n  }\n\n  public static delete(path: string, config = {}) {\n    return this.request(path, null, \"delete\", config);\n  }\n}\n\nexport default BackendAPIClient;\n","import { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\nimport { getRepo } from \"../../api/githubClient\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { RepoGh, BranchGh } from \"../../models/github-models\";\n\ninterface RepositoryActionMeta {\n  repoFullName: string;\n}\n\nexport const fetchContextRepositoryRequest = createAction(\n  \"contextRepository/fetch/request\"\n)<RepositoryActionMeta>();\nexport const fetchContextRepositorySuccess = createAction(\n  \"contextRepository/fetch/success\"\n)<RepoGh, RepositoryActionMeta>();\nexport const fetchContextRepositoryFailure = createAction(\n  \"contextRepository/fetch/failure\"\n)<AxiosError, RepositoryActionMeta>();\n\nexport const setDefaultBranchContextRepository = createAction(\n  \"contextRepository/defaultBranch/set\"\n)<BranchGh>();\n\nexport const fetchContextRepository = (repoFullName: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: RepositoryActionMeta = {\n      repoFullName\n    };\n\n    dispatch(fetchContextRepositoryRequest(meta));\n\n    return getRepo(repoFullName)\n      .then((res: AxiosResponse<RepoGh>) => {\n        dispatch(fetchContextRepositorySuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchContextRepositoryFailure(err, meta));\n        alertFetchEndpoint(\"Error fetching \" + repoFullName, err)(dispatch);\n      });\n  };\n};\n","import ApiClient from \"./apiClient\";\nimport { AxiosPromise } from \"axios\";\nimport {\n  RepoGh,\n  BranchGh,\n  CommitGh,\n  ComparisonBranchGh\n} from \"../models/github-models\";\n\nexport const getRepo = (repoFullName: string): AxiosPromise<RepoGh> => {\n  return ApiClient.get<RepoGh>(`/repos/${repoFullName}`);\n};\n\nexport const getRepoBranches = (\n  repoFullName: string\n): AxiosPromise<BranchGh[]> => {\n  return ApiClient.get<BranchGh[]>(`/repos/${repoFullName}/branches`);\n};\n\nexport const getRepoBranchCommits = (\n  repoFullName: string,\n  branch: string\n): AxiosPromise<CommitGh[]> => {\n  return ApiClient.get<CommitGh[]>(\n    `/repos/${repoFullName}/commits?sha=${branch}`\n  );\n};\n\nexport const getRepoBranchComparison = (\n  repoFullName: string,\n  branch1: string,\n  branch2: string\n): AxiosPromise<ComparisonBranchGh> => {\n  return ApiClient.get<ComparisonBranchGh>(\n    `/repos/${repoFullName}/compare/${branch1}...${branch2}`\n  );\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchContextRepositoryRequest,\n  fetchContextRepositorySuccess,\n  fetchContextRepositoryFailure,\n  setDefaultBranchContextRepository\n} from \"./actions\";\nimport { AxiosError } from \"axios\";\nimport { RepoGh, BranchGh } from \"../../models/github-models\";\n\nexport const stateKey = \"contextRepository\";\n\nexport type ContextRepositoryState = Readonly<{\n  repository: RepoGh | undefined;\n  error: AxiosError | undefined;\n  fetchStatus: FetchStatus;\n\n  defaultBranch: BranchGh | undefined;\n}>;\n\nexport const defaultState: ContextRepositoryState = {\n  repository: undefined,\n  error: undefined,\n  fetchStatus: \"none\",\n\n  defaultBranch: undefined\n};\n\nexport type ContextRepositoryAction = ActionType<\n  | typeof fetchContextRepositoryRequest\n  | typeof fetchContextRepositorySuccess\n  | typeof fetchContextRepositoryFailure\n  | typeof setDefaultBranchContextRepository\n>;\n\nexport function contextRepositoryReducer(\n  state = defaultState,\n  action: ContextRepositoryAction\n): ContextRepositoryState {\n  switch (action.type) {\n    case getType(fetchContextRepositoryRequest):\n      return {\n        ...state,\n        fetchStatus: \"inProgress\"\n      };\n    case getType(fetchContextRepositorySuccess):\n      return {\n        ...state,\n        fetchStatus: \"complete\",\n        error: undefined,\n        repository: action.payload\n      };\n    case getType(fetchContextRepositoryFailure):\n      return {\n        ...state,\n        fetchStatus: \"complete\",\n        error: action.payload\n      };\n\n    case getType(setDefaultBranchContextRepository):\n      return {\n        ...state,\n        defaultBranch: { ...action.payload }\n      };\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const repositoryState = (state: RootState) => state[stateKey];\n\nexport const repository = (state: RootState) => repositoryState(state).repository;\nexport const defaultBranch = (state: RootState) => repositoryState(state).defaultBranch;\nexport const fetchStatus = (state: RootState) => repositoryState(state).fetchStatus;\nexport const error = (state: RootState) => repositoryState(state).error;\n","import React from \"react\";\nimport { AxiosError } from \"axios\";\nimport { FetchStatus } from \"../../store/common\";\nimport {\n  PageSection,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateVariant,\n  Button,\n  ButtonVariant,\n  EmptyStateBody\n} from \"@patternfly/react-core\";\nimport { CloudRainIcon } from \"@patternfly/react-icons\";\n\nexport interface ContextRepositoryLoaderStateToProps {\n  ctxRepositoryError: AxiosError<any> | undefined;\n  ctxRepositoryFetchStatus: FetchStatus;\n}\n\nexport interface ContextRepositoryLoaderDispatchToProps {\n  fetchCtxRepository: (repoFullName: string) => any;\n}\n\nexport interface ContextRepositoryLoaderProps\n  extends ContextRepositoryLoaderStateToProps,\n    ContextRepositoryLoaderDispatchToProps {\n  repoFullName: string;\n  children: React.ReactNode;\n}\n\ninterface State {}\n\nexport class ContextRepositoryLoader extends React.Component<\n  ContextRepositoryLoaderProps,\n  State\n> {\n  componentDidMount() {\n    const { fetchCtxRepository, repoFullName } = this.props;\n    fetchCtxRepository(repoFullName);\n  }\n\n  renderMessage = (message: string) => {\n    return (\n      <PageSection>\n        <Bullseye>{message}</Bullseye>\n      </PageSection>\n    );\n  };\n\n  reloadCurrentPage = () => {\n    window.location.reload();\n  };\n\n  renderError = () => {\n    const { repoFullName } = this.props;\n    return (\n      <PageSection>\n        <Bullseye>\n          <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={CloudRainIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              {repoFullName}.\n            </Title>\n            <EmptyStateBody>\n              Error fetching repository. Try to reload the page to fetch the\n              data again. You can reload the page clicking on the button below.\n            </EmptyStateBody>\n            <Button\n              id=\"ContextRepositoryLoader_retryButton\"\n              onClick={this.reloadCurrentPage}\n              variant={ButtonVariant.primary}\n            >\n              Retry\n            </Button>\n          </EmptyState>\n        </Bullseye>\n      </PageSection>\n    );\n  };\n\n  render() {\n    const {\n      ctxRepositoryError,\n      ctxRepositoryFetchStatus,\n      children\n    } = this.props;\n\n    if (ctxRepositoryError) {\n      return this.renderError();\n    }\n\n    switch (ctxRepositoryFetchStatus) {\n      case \"none\":\n        return this.renderMessage(\"Waiting for fetch\");\n      case \"inProgress\":\n        return this.renderMessage(\"Fetching...\");\n      case \"complete\":\n        return <React.Fragment>{children}</React.Fragment>;\n    }\n  }\n}\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  contextRepositoryActions,\n  contextRepositorySelectors\n} from \"../../store/contextRepository\";\nimport { ContextRepositoryLoader } from \"./ContextRepositoryLoader\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  ctxRepositoryError: contextRepositorySelectors.error(state),\n  ctxRepositoryFetchStatus: contextRepositorySelectors.fetchStatus(state)\n}));\n\nconst mapDispatchToProps = {\n  fetchCtxRepository: contextRepositoryActions.fetchContextRepository\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ContextRepositoryLoader);\n","import { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\nimport { getRepoBranches } from \"../../api/githubClient\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { BranchGh } from \"../../models/github-models\";\n\ninterface RepositoryActionMeta {\n  repoFullName: string;\n}\n\nexport const fetchRepoBranchesRequest = createAction(\n  \"repoBranches/fetch/request\"\n)<RepositoryActionMeta>();\nexport const fetchRepoBranchesSuccess = createAction(\n  \"repoBranches/fetch/success\"\n)<BranchGh[], RepositoryActionMeta>();\nexport const fetchRepoBranchesFailure = createAction(\n  \"repoBranches/fetch/failure\"\n)<AxiosError, RepositoryActionMeta>();\n\nexport const fetchRepoBranches = (repoFullName: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: RepositoryActionMeta = {\n      repoFullName\n    };\n\n    dispatch(fetchRepoBranchesRequest(meta));\n\n    return getRepoBranches(repoFullName)\n      .then((res: AxiosResponse<BranchGh[]>) => {\n        dispatch(fetchRepoBranchesSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchRepoBranchesFailure(err, meta));\n        alertFetchEndpoint(\n          \"Error fetching \" + repoFullName + \" branches\",\n          err\n        )(dispatch);\n      });\n  };\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchRepoBranchesRequest,\n  fetchRepoBranchesSuccess,\n  fetchRepoBranchesFailure\n} from \"./actions\";\nimport { AxiosError } from \"axios\";\nimport { BranchGh } from \"../../models/github-models\";\n\nexport const stateKey = \"repoBranches\";\n\nexport type RepoBranchesState = Readonly<{\n  byId: Map<string, BranchGh[]>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: RepoBranchesState = {\n  byId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type RepoBranchesAction = ActionType<\n  | typeof fetchRepoBranchesRequest\n  | typeof fetchRepoBranchesSuccess\n  | typeof fetchRepoBranchesFailure\n>;\n\nexport function repoBranchesReducer(\n  state = defaultState,\n  action: RepoBranchesAction\n): RepoBranchesState {\n  switch (action.type) {\n    case getType(fetchRepoBranchesRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.payload.repoFullName,\n          \"inProgress\"\n        )\n      };\n    case getType(fetchRepoBranchesSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.repoFullName,\n          \"complete\"\n        ),\n        byId: new Map(state.byId).set(action.meta.repoFullName, action.payload),\n        errors: new Map(state.errors).set(action.meta.repoFullName, undefined)\n      };\n    case getType(fetchRepoBranchesFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.repoFullName,\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          action.meta.repoFullName,\n          action.payload\n        )\n      };\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const repositoryState = (state: RootState) => state[stateKey];\n\nexport const selectRepoBranches = (state: RootState, repoFullName: string) =>\n  repositoryState(state).byId.get(repoFullName);\n\nexport const selectFetchStatus = (state: RootState, repoFullName: string) =>\n  repositoryState(state).fetchStatus.get(repoFullName);\n\nexport const selectError = (state: RootState, repoFullName: string) =>\n  repositoryState(state).errors.get(repoFullName);\n","import { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\nimport { getRepoBranchCommits } from \"../../api/githubClient\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { CommitGh } from \"../../models/github-models\";\n\ninterface RepositoryActionMeta {\n  repoFullName: string;\n  branchName: string;\n}\n\nexport const fetchBranchCommitsRequest = createAction(\n  \"branchCommits/fetch/request\"\n)<RepositoryActionMeta>();\nexport const fetchBranchCommitsSuccess = createAction(\n  \"branchCommits/fetch/success\"\n)<CommitGh[], RepositoryActionMeta>();\nexport const fetchBranchCommitsFailure = createAction(\n  \"branchCommits/fetch/failure\"\n)<AxiosError, RepositoryActionMeta>();\n\nexport const fetchBranchCommits = (\n  repoFullName: string,\n  branchName: string\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: RepositoryActionMeta = {\n      repoFullName,\n      branchName\n    };\n\n    dispatch(fetchBranchCommitsRequest(meta));\n\n    return getRepoBranchCommits(repoFullName, branchName)\n      .then((res: AxiosResponse<CommitGh[]>) => {\n        dispatch(fetchBranchCommitsSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchBranchCommitsFailure(err, meta));\n        alertFetchEndpoint(\n          \"Error fetching \" + branchName + \"'s commits\",\n          err\n        )(dispatch);\n      });\n  };\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchBranchCommitsRequest,\n  fetchBranchCommitsSuccess,\n  fetchBranchCommitsFailure\n} from \"./actions\";\nimport { AxiosError } from \"axios\";\nimport { CommitGh } from \"../../models/github-models\";\n\nexport const stateKey = \"branchCommits\";\n\nexport const getIdQuery = (repoFullName: string, branchName: string) => {\n  return `${repoFullName}...${branchName}`;\n};\n\nexport type BranchCommitsState = Readonly<{\n  byId: Map<string, CommitGh[]>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: BranchCommitsState = {\n  byId: new Map(), // repoFullName...branchName\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type BranchCommitsAction = ActionType<\n  | typeof fetchBranchCommitsRequest\n  | typeof fetchBranchCommitsSuccess\n  | typeof fetchBranchCommitsFailure\n>;\n\nexport function branchCommitsReducer(\n  state = defaultState,\n  action: BranchCommitsAction\n): BranchCommitsState {\n  switch (action.type) {\n    case getType(fetchBranchCommitsRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(action.payload.repoFullName, action.payload.branchName),\n          \"inProgress\"\n        )\n      };\n    case getType(fetchBranchCommitsSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(action.meta.repoFullName, action.meta.branchName),\n          \"complete\"\n        ),\n        byId: new Map(state.byId).set(\n          getIdQuery(action.meta.repoFullName, action.meta.branchName),\n          action.payload\n        ),\n        errors: new Map(state.errors).set(\n          getIdQuery(action.meta.repoFullName, action.meta.branchName),\n          undefined\n        )\n      };\n    case getType(fetchBranchCommitsFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(action.meta.repoFullName, action.meta.branchName),\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          getIdQuery(action.meta.repoFullName, action.meta.branchName),\n          action.payload\n        )\n      };\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey, getIdQuery } from \"./reducer\";\n\nexport const branchCommitsState = (state: RootState) => state[stateKey];\n\nexport const selectBranchCommits = (\n  state: RootState,\n  repoFullName: string,\n  branchName: string\n) => branchCommitsState(state).byId.get(getIdQuery(repoFullName, branchName));\n\nexport const selectBranchCommitsFetchStatus = (\n  state: RootState,\n  repoFullName: string,\n  branchName: string\n) => branchCommitsState(state).fetchStatus.get(getIdQuery(repoFullName, branchName));\n\nexport const selectBranchCommitsError = (\n  state: RootState,\n  repoFullName: string,\n  branchName: string\n) => branchCommitsState(state).errors.get(getIdQuery(repoFullName, branchName));\n","import { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\nimport { getRepoBranchComparison } from \"../../api/githubClient\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { ComparisonBranchGh } from \"../../models/github-models\";\n\ninterface RepositoryActionMeta {\n  repoFullName: string;\n  branch1: string;\n  branch2: string;\n}\n\nexport const fetchBranchComparisonRequest = createAction(\n  \"branchComparison/fetch/request\"\n)<RepositoryActionMeta>();\nexport const fetchBranchComparisonSuccess = createAction(\n  \"branchComparison/fetch/success\"\n)<ComparisonBranchGh, RepositoryActionMeta>();\nexport const fetchBranchComparisonFailure = createAction(\n  \"branchComparison/fetch/failure\"\n)<AxiosError, RepositoryActionMeta>();\n\nexport const fetchBranchComparison = (\n  repoFullName: string,\n  branch1: string,\n  branch2: string\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: RepositoryActionMeta = {\n      repoFullName,\n      branch1,\n      branch2\n    };\n\n    dispatch(fetchBranchComparisonRequest(meta));\n\n    return getRepoBranchComparison(repoFullName, branch1, branch2)\n      .then((res: AxiosResponse<ComparisonBranchGh>) => {\n        dispatch(fetchBranchComparisonSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchBranchComparisonFailure(err, meta));\n        alertFetchEndpoint(\n          \"Error fetching comparison \" + branch1 + \"...\" + branch2,\n          err\n        )(dispatch);\n      });\n  };\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchBranchComparisonRequest,\n  fetchBranchComparisonSuccess,\n  fetchBranchComparisonFailure\n} from \"./actions\";\nimport { AxiosError } from \"axios\";\nimport { ComparisonBranchGh } from \"../../models/github-models\";\n\nexport const stateKey = \"branchComparison\";\n\nexport const getIdQuery = (\n  repoFullName: string,\n  branchName1: string,\n  branchName2: string\n) => {\n  return `${repoFullName}:${branchName1}...${branchName2}`;\n};\n\nexport type BranchComparisonState = Readonly<{\n  byId: Map<string, ComparisonBranchGh>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: BranchComparisonState = {\n  byId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type BranchComparisonAction = ActionType<\n  | typeof fetchBranchComparisonRequest\n  | typeof fetchBranchComparisonSuccess\n  | typeof fetchBranchComparisonFailure\n>;\n\nexport function branchComparisonReducer(\n  state = defaultState,\n  action: BranchComparisonAction\n): BranchComparisonState {\n  switch (action.type) {\n    case getType(fetchBranchComparisonRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(\n            action.payload.repoFullName,\n            action.payload.branch1,\n            action.payload.branch2\n          ),\n          \"inProgress\"\n        )\n      };\n    case getType(fetchBranchComparisonSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(\n            action.meta.repoFullName,\n            action.meta.branch1,\n            action.meta.branch2\n          ),\n          \"complete\"\n        ),\n        byId: new Map(state.byId).set(\n          getIdQuery(\n            action.meta.repoFullName,\n            action.meta.branch1,\n            action.meta.branch2\n          ),\n          action.payload\n        ),\n        errors: new Map(state.errors).set(\n          getIdQuery(\n            action.meta.repoFullName,\n            action.meta.branch1,\n            action.meta.branch2\n          ),\n          undefined\n        )\n      };\n    case getType(fetchBranchComparisonFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          getIdQuery(\n            action.meta.repoFullName,\n            action.meta.branch1,\n            action.meta.branch2\n          ),\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          getIdQuery(\n            action.meta.repoFullName,\n            action.meta.branch1,\n            action.meta.branch2\n          ),\n          action.payload\n        )\n      };\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey, getIdQuery } from \"./reducer\";\n\nexport const branchComparisonState = (state: RootState) => state[stateKey];\n\nexport const selectBranchComparison = (\n  state: RootState,\n  repoFullName: string,\n  branch1: string,\n  branch2: string\n) =>\n  branchComparisonState(state).byId.get(\n    getIdQuery(repoFullName, branch1, branch2)\n  );\n\nexport const selectBranchComparisonFetchStatus = (\n  state: RootState,\n  repoFullName: string,\n  branch1: string,\n  branch2: string\n) =>\n  branchComparisonState(state).fetchStatus.get(\n    getIdQuery(repoFullName, branch1, branch2)\n  );\n\nexport const selectBranchComparisonError = (\n  state: RootState,\n  repoFullName: string,\n  branch1: string,\n  branch2: string\n) =>\n  branchComparisonState(state).errors.get(\n    getIdQuery(repoFullName, branch1, branch2)\n  );\n","import React from \"react\";\nimport { FetchStatus } from \"../../store/common\";\nimport { OwnProps } from \".\";\nimport { AxiosError } from \"axios\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { ComparisonBranchGh } from \"../../models/github-models\";\n\ninterface StateToProps {\n  branchComparison: ComparisonBranchGh | undefined;\n  branchComparisonError: AxiosError | undefined;\n  branchComparisonFechStatus: FetchStatus | undefined;\n}\n\ninterface DispatchToProps {\n  fetchBranchComparison: (\n    repoFullName: string,\n    branchBaseName: string,\n    branchToCompareName: string\n  ) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, OwnProps {\n  children: React.ReactNode;\n}\n\ninterface State {}\n\nexport class BranchComparisonWrapper extends React.Component<Props, State> {\n  componentDidMount() {\n    const {\n      fetchBranchComparison,\n      repo,\n      branchBase,\n      branchToCompare\n    } = this.props;\n    fetchBranchComparison(\n      repo.full_name,\n      branchBase.name,\n      branchToCompare.name\n    );\n  }\n\n  render() {\n    const {\n      branchComparison,\n      branchComparisonFechStatus,\n      children\n    } = this.props;\n\n    switch (branchComparisonFechStatus) {\n      case \"none\":\n      case \"inProgress\":\n        return (\n          <React.Fragment>\n            <Skeleton\n              variant=\"rect\"\n              width={250}\n              height={800}\n              animation=\"wave\"\n            />\n          </React.Fragment>\n        );\n    }\n\n    return (\n      <React.Fragment>\n        {branchComparison &&\n          Array.apply(0, Array(branchComparison.behind_by)).map((c, i) => (\n            <ul key={i} className=\"pf-c-notification-drawer__list\">\n              <li className=\"pf-c-notification-drawer__list-item pf-m-read pf-m-warning pf-m-hoverable\">\n                <div className=\"pf-c-notification-drawer__list-item-header\">\n                  <span className=\"pf-c-notification-drawer__list-item-header-icon\">\n                    <i\n                      className=\"fas fa-exclamation-triangle\"\n                      aria-hidden=\"true\"\n                    ></i>\n                  </span>\n                  <h2\n                    className=\"pf-c-notification-drawer__list-item-header-title\"\n                    style={{ width: 200, whiteSpace: \"nowrap\" }}\n                  >\n                    <span className=\"pf-screen-reader\">\n                      Success notification:\n                    </span>\n                  </h2>\n                </div>\n              </li>\n            </ul>\n          ))}\n        {children}\n      </React.Fragment>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  branchComparisonActions,\n  branchComparisonSelectors\n} from \"../../store/branchComparison\";\nimport { BranchComparisonWrapper as BranchesBoard } from \"./BranchComparisonWrapper\";\nimport { BranchGh, RepoGh } from \"../../models/github-models\";\n\nexport interface OwnProps {\n  repo: RepoGh;\n  branchBase: BranchGh;\n  branchToCompare: BranchGh;\n}\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: OwnProps) => ({\n  branchComparison: branchComparisonSelectors.selectBranchComparison(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branchBase.name,\n    ownProps.branchToCompare.name\n  ),\n  branchComparisonFechStatus: branchComparisonSelectors.selectBranchComparisonFetchStatus(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branchBase.name,\n    ownProps.branchToCompare.name\n  ),\n  branchComparisonError: branchComparisonSelectors.selectBranchComparisonError(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branchBase.name,\n    ownProps.branchToCompare.name\n  )\n}));\n\nconst mapDispatchToProps = {\n  fetchBranchComparison: branchComparisonActions.fetchBranchComparison\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BranchesBoard);\n","import React from \"react\";\nimport { FetchStatus } from \"../../store/common\";\nimport { OwnProps } from \".\";\nimport Box from \"@material-ui/core/Box\";\nimport BranchComparisonWrapper from \"../BranchComparisonWrapper\";\nimport { CommitGh } from \"../../models/github-models\";\nimport { AxiosError } from \"axios\";\n\ninterface StateToProps {\n  branchCommits: CommitGh[] | undefined;\n  branchCommitsFechStatus: FetchStatus | undefined;\n  branchCommitsError: AxiosError | undefined;\n}\n\ninterface DispatchToProps {\n  fetchBranchCommits: (repoFullName: string, branchName: string) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, OwnProps {}\n\ninterface State {}\n\nexport class BranchBoard extends React.Component<Props, State> {\n  componentDidMount() {\n    const { fetchBranchCommits, branch, repo } = this.props;\n    fetchBranchCommits(repo.full_name, branch.name);\n  }\n\n  render() {\n    const { repo, repoDefaultBranch, branch, branchCommits } = this.props;\n\n    return (\n      <div style={{ width: \"250px\" }} className=\"pf-c-notification-drawer\">\n        <div className=\"pf-c-notification-drawer__header\">\n          <h1 className=\"pf-c-notification-drawer__header-title\">\n            {branch.name}\n          </h1>\n        </div>\n        <div className=\"pf-c-notification-drawer__body\">\n          <BranchComparisonWrapper\n            repo={repo}\n            branchBase={repoDefaultBranch}\n            branchToCompare={branch}\n          >\n            {(branchCommits || []).map(c => (\n              <ul key={c.sha} className=\"pf-c-notification-drawer__list\">\n                <li className=\"pf-c-notification-drawer__list-item pf-m-read pf-m-info pf-m-hoverable\">\n                  <div className=\"pf-c-notification-drawer__list-item-header\">\n                    <span className=\"pf-c-notification-drawer__list-item-header-icon\">\n                      {/* <i className=\"fas fa-check-circle\" aria-hidden=\"true\"></i> */}\n                    </span>\n                    <h2\n                      className=\"pf-c-notification-drawer__list-item-header-title\"\n                      style={{ width: 200, whiteSpace: \"nowrap\" }}\n                    >\n                      <span className=\"pf-screen-reader\">\n                        Success notification:\n                      </span>\n                      <Box\n                        component=\"div\"\n                        textOverflow=\"ellipsis\"\n                        overflow=\"hidden\"\n                      >\n                        <a\n                          href={c.html_url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <small>{c.commit.message}</small>\n                        </a>\n                      </Box>\n                    </h2>\n                  </div>\n                </li>\n              </ul>\n            ))}\n          </BranchComparisonWrapper>\n        </div>\n      </div>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  branchCommitsActions,\n  branchCommitsSelectors\n} from \"../../store/branchCommits\";\nimport { BranchBoard as BranchesBoard } from \"./BranchBoard\";\nimport { BranchGh, RepoGh } from \"../../models/github-models\";\n\nexport interface OwnProps {\n  repo: RepoGh;\n  repoDefaultBranch: BranchGh;\n  branch: BranchGh;\n}\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: OwnProps) => ({\n  branchCommits: branchCommitsSelectors.selectBranchCommits(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branch.name\n  ),\n  branchCommitsFechStatus: branchCommitsSelectors.selectBranchCommitsFetchStatus(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branch.name\n  ),\n  branchCommitsError: branchCommitsSelectors.selectBranchCommitsError(\n    state,\n    ownProps.repo.full_name,\n    ownProps.branch.name\n  )\n}));\n\nconst mapDispatchToProps = {\n  fetchBranchCommits: branchCommitsActions.fetchBranchCommits\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BranchesBoard);\n","import React from \"react\";\nimport { FetchStatus } from \"../../store/common\";\nimport { Flex, FlexItem, CardBody, Card } from \"@patternfly/react-core\";\nimport BranchBoard from \"../BranchBoard\";\nimport { RepoGh, BranchGh } from \"../../models/github-models\";\nimport { AxiosError } from \"axios\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\ninterface StateToProps {\n  ctxRepo: RepoGh | undefined;\n  cxtRepoBranches: BranchGh[] | undefined;\n  ctxRepoDefaultBranch: BranchGh | undefined;\n  ctxRepoBranchesError: AxiosError | undefined;\n  ctxRepoBranchesFechStatus: FetchStatus | undefined;\n}\n\ninterface DispatchToProps {\n  fetchBranches: (repoFullName: string) => any;\n  setDefaultBranchCtxRepository: (branch: BranchGh) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n  userDefinedBranchOrder: string[];\n}\n\ninterface State {}\n\nexport class BranchesBoard extends React.Component<Props, State> {\n  componentDidMount() {\n    const { fetchBranches, ctxRepo } = this.props;\n    if (ctxRepo) {\n      fetchBranches(ctxRepo.full_name);\n    }\n  }\n\n  componentDidUpdate(_prevProps: Props) {\n    const {\n      ctxRepo,\n      cxtRepoBranches,\n      setDefaultBranchCtxRepository\n    } = this.props;\n\n    if (ctxRepo && cxtRepoBranches && !_prevProps.ctxRepoDefaultBranch) {\n      const defaultBranch: BranchGh | undefined = cxtRepoBranches.find(\n        elem => elem.name === ctxRepo.default_branch\n      );\n\n      if (defaultBranch) {\n        setDefaultBranchCtxRepository(defaultBranch);\n      }\n    }\n  }\n\n  render() {\n    const {\n      ctxRepo,\n      cxtRepoBranches,\n      ctxRepoBranchesFechStatus,\n      ctxRepoDefaultBranch,\n      userDefinedBranchOrder\n    } = this.props;\n\n    const branches = cxtRepoBranches ? [...cxtRepoBranches] : [];\n    branches.sort((a, b) => {\n      if (ctxRepoDefaultBranch) {\n        if (ctxRepoDefaultBranch.name === a.name) return -1;\n        else if (ctxRepoDefaultBranch.name === b.name) return 1;\n      }\n\n      const aIndex = userDefinedBranchOrder.findIndex(p => a.name === p);\n      const bIndex = userDefinedBranchOrder.findIndex(p => b.name === p);\n\n      if (aIndex >= 0 && bIndex >= 0) return aIndex - bIndex;\n      else if (aIndex >= 0 && bIndex === -1) return 1;\n      else if (aIndex === -1 && bIndex >= 0 - 1) return -1;\n\n      return a.name.localeCompare(b.name);\n    });\n\n    switch (ctxRepoBranchesFechStatus) {\n      case \"none\":\n      case \"inProgress\":\n        return (\n          <Flex>\n            {Array.apply(0, Array(4)).map((e, i) => (\n              <FlexItem key={i}>\n                <Card>\n                  <CardBody>\n                    <React.Fragment>\n                      <Skeleton variant=\"circle\" width={30} height={30} />\n                      <Skeleton variant=\"text\" width={250} />\n                    </React.Fragment>\n                  </CardBody>\n                </Card>\n              </FlexItem>\n            ))}\n          </Flex>\n        );\n    }\n\n    return (\n      <Flex>\n        {ctxRepo &&\n          ctxRepoDefaultBranch &&\n          branches.map(element => (\n            <FlexItem key={element.name}>\n              <BranchBoard\n                repo={ctxRepo}\n                repoDefaultBranch={ctxRepoDefaultBranch}\n                branch={element}\n              />\n            </FlexItem>\n          ))}\n      </Flex>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  contextRepositoryActions,\n  contextRepositorySelectors\n} from \"../../store/contextRepository\";\nimport {\n  repoBranchesActions,\n  repoBranchesSelectors\n} from \"../../store/repoBranches\";\nimport { BranchesBoard } from \"./BranchesBoard\";\n\nconst mapStateToProps = createMapStateToProps(state => {\n  const ctxRepository = contextRepositorySelectors.repository(state);\n  const repoFullName = ctxRepository ? ctxRepository.full_name : \"\";\n\n  return {\n    ctxRepo: ctxRepository ? ctxRepository : undefined,\n    ctxRepoDefaultBranch: contextRepositorySelectors.defaultBranch(state),\n    cxtRepoBranches: repoBranchesSelectors.selectRepoBranches(state, repoFullName),\n    ctxRepoBranchesFechStatus: repoBranchesSelectors.selectFetchStatus(\n      state,\n      repoFullName\n    ),\n    ctxRepoBranchesError: repoBranchesSelectors.selectError(state, repoFullName)\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchBranches: repoBranchesActions.fetchRepoBranches,\n  setDefaultBranchCtxRepository:\n    contextRepositoryActions.setDefaultBranchContextRepository\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BranchesBoard);\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  Bullseye\n} from \"@patternfly/react-core\";\nimport queryString, { ParsedQuery } from \"query-string\";\nimport { AppRouterProps } from \"../../../models/routerProps\";\nimport ContextRepositoryLoader from \"../../../SmartComponents/ContextRepositoryLoader\";\nimport BranchesBoard from \"../../../SmartComponents/BranchesBoard\";\nimport { getRepoFullName } from \"../../../Utils/Utils\";\n\nexport interface PageBranchesProps extends AppRouterProps {}\n\nexport const extractBranchOrderQueryParam = (queryParams: ParsedQuery) => {\n  const branchOrderQueryParam = queryParams.branchOrder;\n\n  let result: string[] = [];\n  if (typeof branchOrderQueryParam === \"string\") {\n    result = [branchOrderQueryParam];\n  } else if (Array.isArray(branchOrderQueryParam)) {\n    result = branchOrderQueryParam;\n  }\n\n  return result;\n};\n\nexport const PageBranches: React.FC<PageBranchesProps> = ({\n  match,\n  location\n}) => {\n  const repoFullName = getRepoFullName(\n    match.params.owner,\n    match.params.repository\n  );\n\n  const queryParams = queryString.parse(location.search);\n  let userDefinedBranchOrder: string[] = extractBranchOrderQueryParam(\n    queryParams\n  );\n\n  return (\n    <React.Fragment>\n      <ContextRepositoryLoader repoFullName={repoFullName}>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Branches</Text>\n            <Text component=\"p\">Monitor your branches here.</Text>\n          </TextContent>\n        </PageSection>\n        <PageSection>\n          <Bullseye>\n            <BranchesBoard userDefinedBranchOrder={userDefinedBranchOrder} />\n          </Bullseye>\n        </PageSection>\n      </ContextRepositoryLoader>\n    </React.Fragment>\n  );\n};\n","export const getRepoFullName = (owner: string, repo: string) => {\n    return `${owner}/${repo}`;\n}\n\nexport const getOwnerAndRepoFromFullName = (repoFullName: string) => {\n    return repoFullName.split(\"/\");\n}","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { PageForbidden403 } from \"./PresentationalComponents/Pages/PageForbidden403\";\nimport { PageHome } from \"./PresentationalComponents/Pages/PageHome\";\nimport { PageBranches } from \"./PresentationalComponents/Pages/PageBranches\";\n\nexport const AppRoutes = () => {\n  return (\n    <Switch>\n      <Route path=\"/home\" component={PageHome} />\n      <Route\n        path=\"/monitor/:owner/:repository/branches\"\n        component={PageBranches}\n      />\n      <Route path=\"/error403\" component={PageForbidden403} />\n      <Route path=\"/\" render={() => <Redirect to={\"/home\"} />} />\n    </Switch>\n  );\n};\n","import * as React from \"react\";\nimport {\n  AboutModal,\n  TextContent,\n  TextList,\n  TextListItem,\n  Button,\n  ButtonVariant\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport brandImage from \"../../../logo.svg\";\n\nexport interface ButtonAboutProjectProps {}\n\ninterface State {\n  isOpen: boolean;\n}\n\nexport class ButtonAboutProject extends React.Component<\n  ButtonAboutProjectProps,\n  State\n> {\n  constructor(props: ButtonAboutProjectProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggleButton = () => {\n    this.setState(({ isOpen }) => ({\n      isOpen: !isOpen\n    }));\n  };\n\n  render() {\n    const { isOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          id=\"aboutButton\"\n          aria-label=\"About button\"\n          variant={ButtonVariant.plain}\n          onClick={this.toggleButton}\n        >\n          <HelpIcon />\n        </Button>\n        <AboutModal\n          isOpen={isOpen}\n          onClose={this.toggleButton}\n          trademark=\"COPYRIGHT © 2020.\"\n          brandImageSrc={brandImage}\n          brandImageAlt=\"Logo\"\n          productName=\"gh-branches-dashboard\"\n        >\n          <TextContent>\n            <TextList component=\"dl\">\n              <TextListItem component=\"dt\">Source code</TextListItem>\n              <TextListItem component=\"dd\">\n                <a href=\"https://github.com/carlosthe19916/gh-branches-dashboard\">\n                  Github\n                </a>\n              </TextListItem>\n            </TextList>\n          </TextContent>\n        </AboutModal>\n      </React.Fragment>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n    contextRepositorySelectors\n} from \"../../store/contextRepository\";\nimport { NavLinkBranches } from \"./NavLinkBranches\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n    ctxRepository: contextRepositorySelectors.repository(state)\n}));\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(NavLinkBranches);","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { RepoGh } from \"../../models/github-models\";\n\nexport interface NavLinkBranchesStateToProps {\n  ctxRepository: RepoGh | undefined;\n}\n\nexport interface NavLinkBranchesDispatchToProps {}\n\nexport interface Props\n  extends NavLinkBranchesStateToProps,\n    NavLinkBranchesDispatchToProps {}\n\nexport const NavLinkBranches: React.FC<Props> = ({ ctxRepository }) => {\n  return ctxRepository ? (\n    <NavLink\n      to={`/monitor/${ctxRepository.full_name}/branches`}\n      className=\"pf-c-nav__link\"\n      activeClassName=\"pf-m-current\"\n    >\n      Branches\n    </NavLink>\n  ) : (\n    <React.Fragment></React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Nav, NavItem, NavList, NavVariants } from \"@patternfly/react-core\";\nimport NavLinkBranches from \"../../../SmartComponents/NavLinkBranches\";\n\ninterface Props {}\n\ninterface State {}\n\nexport class PageNav extends React.Component<Props, State> {\n  render() {\n    return (\n      <Nav id=\"nav-primary-simple\" aria-label=\"Nav\">\n        <NavList variant={NavVariants.horizontal}>\n          <NavItem>\n            <NavLink to=\"/home\" activeClassName=\"pf-m-current\">\n              Home\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLinkBranches />\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  PageHeader,\n  Brand,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from \"@patternfly/react-core\";\nimport { css } from \"@patternfly/react-styles\";\nimport accessibleStyles from \"@patternfly/react-styles/css/utilities/Accessibility/accessibility\";\n\nimport navBrandImage from \"../../../brand.svg\";\nimport { PageNav } from \"../PageNav\";\n\nexport interface HeaderProjectProps {\n  aboutButton: React.ReactNode;\n}\n\ninterface State {}\n\nexport class HeaderProject extends React.Component<HeaderProjectProps, State> {\n  renderPageToolbar = () => {\n    const { aboutButton } = this.props;\n    return (\n      <React.Fragment>\n        <Toolbar>\n          <ToolbarGroup\n            className={css(\n              accessibleStyles.screenReader,\n              accessibleStyles.visibleOnLg\n            )}\n          >\n            <ToolbarItem>{aboutButton}</ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    return (\n      <PageHeader\n        logo={<Brand src={navBrandImage} alt=\"gh-branches-dashboard\" />}\n        toolbar={this.renderPageToolbar()}\n        topNav={<PageNav />}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Page, SkipToContent } from \"@patternfly/react-core\";\nimport { ButtonAboutProject } from \"../ButtonAboutProject\";\nimport { HeaderProject } from \"../HeaderProject\";\n\nexport interface HorizontalLayoutProps {}\n\ninterface State {}\n\nexport class HorizontalLayout extends React.Component<\n  HorizontalLayoutProps,\n  State\n> {\n  renderAboutButton = () => {\n    return <ButtonAboutProject />;\n  };\n\n  render() {\n    const { children } = this.props;\n\n    const pageId = \"main-content-page-layout-horizontal-nav\";\n    const PageSkipToContent = (\n      <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={<HeaderProject aboutButton={this.renderAboutButton()} />}\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          {children}\n        </Page>\n      </React.Fragment>\n    );\n  }\n}\n","import { Button, Modal, ButtonVariant } from \"@patternfly/react-core\";\nimport React from \"react\";\nimport \"./DeleteDialog.scss\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\n\nexport interface DeleteDialogBaseProps {\n  onDelete: () => void;\n  onCancel: typeof deleteDialogActions.closeModal;\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n}\n\ninterface State {}\n\nexport class DeleteDialogBase extends React.Component<DeleteDialogBaseProps, State> {\n  public render() {\n    const {\n      type,\n      name,\n      onDelete,\n      onCancel,\n      isOpen,\n      isProcessing,\n      isError\n    } = this.props;\n\n    return (\n      <Modal\n        isSmall={true}\n        title={`Delete ${name}?`}\n        onClose={() => {\n          onCancel();\n        }}\n        isOpen={isOpen}\n        actions={[\n          <Button\n            key=\"confirm\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.danger}\n            onClick={onDelete}\n          >\n            Delete {`${type}`}\n          </Button>,\n          <Button\n            key=\"cancel\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.link}\n            onClick={() => {\n              onCancel();\n            }}\n          >\n            Cancel\n          </Button>\n        ]}\n      >\n        {isError\n          ? `Ops! There was a problem while deleting the ${type}.`\n          : `Are you sure you want to delete this ${type}? This action will remove any data related to this ${type} permanently.`}\n      </Modal>\n    );\n  }\n}\n","import { AxiosError } from 'axios';\nimport { createAction } from 'typesafe-actions';\n\ninterface Item {\n  name: string;\n  type: string;\n  onDelete: () => void;\n  onCancel: () => void;\n}\n\nexport const openModal = createAction('dialog/delete/open')<Item>();\nexport const closeModal = createAction('dialog/delete/close')<void>();\nexport const processing = createAction('dialog/delete/processing')<void>();\nexport const error = createAction('dialog/delete/error')<AxiosError>();\n","import { ActionType, getType } from 'typesafe-actions';\nimport { closeModal, error, openModal, processing } from './actions';\n\nexport const stateKey = 'deleteDialog';\n\nexport type DeleteDialogState = Readonly<{\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n  onDelete: () => void;\n}>;\n\nexport const defaultState: DeleteDialogState = {\n  isOpen: false,\n  isProcessing: false,\n  isError: false,\n  name: '',\n  type: '',\n  onDelete: () => { },\n};\n\nexport type DeleteDialogAction = ActionType<\n  typeof openModal | typeof closeModal | typeof processing | typeof error\n>;\n\nexport const reducer = (\n  state: DeleteDialogState = defaultState,\n  action: DeleteDialogAction\n): DeleteDialogState => {\n  switch (action.type) {\n    case getType(openModal):\n      return {\n        ...state,\n        ...action.payload,\n        isOpen: true,\n      };\n    case getType(processing):\n      return {\n        ...state,\n        isProcessing: true,\n      };\n    case getType(closeModal):\n      return defaultState;\n    case getType(error):\n      return {\n        ...state,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { RootState } from '../rootReducer';\nimport { stateKey } from './reducer';\n\nexport const deleteDialogState = (state: RootState) => state[stateKey];\n\nexport const isProcessing = (state: RootState) => deleteDialogState(state).isProcessing;\n\nexport const isOpen = (state: RootState) => deleteDialogState(state).isOpen;\n\nexport const isError = (state: RootState) => deleteDialogState(state).isError;\n\nexport const name = (state: RootState) => deleteDialogState(state).name;\n\nexport const type = (state: RootState) => deleteDialogState(state).type;\n\nexport const onDelete = (state: RootState) => deleteDialogState(state).onDelete;\n","import { connect } from \"react-redux\";\nimport { DeleteDialogBase } from \"./DeleteDialog\";\nimport {\n  deleteDialogSelectors,\n  deleteDialogActions\n} from \"../../store/deleteDialog\";\nimport { createMapStateToProps } from \"../../store/common\";\n\nexport default connect(\n  createMapStateToProps(state => ({\n    onDelete: deleteDialogSelectors.onDelete(state),\n    isOpen: deleteDialogSelectors.isOpen(state),\n    isProcessing: deleteDialogSelectors.isProcessing(state),\n    isError: deleteDialogSelectors.isError(state),\n    name: deleteDialogSelectors.name(state),\n    type: deleteDialogSelectors.type(state)\n  })),\n  {\n    onCancel: deleteDialogActions.closeModal\n  }\n)(DeleteDialogBase);\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AppRoutes } from \"./Routes\";\nimport { HorizontalLayout } from \"./PresentationalComponents/Layout/HorizontaLayout\";\n\nimport \"./App.scss\";\n\nimport DeleteMessageDialog from \"./SmartComponents/DeleteDialog\";\n\nimport \"@redhat-cloud-services/frontend-components-notifications/index.css\";\nimport \"@redhat-cloud-services/frontend-components-notifications/index.css\";\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nconst App: React.FC = () => {\n  const NotificationsPortal =\n    frontendComponentsNotifications.NotificationsPortal;\n\n  return (\n    <React.Fragment>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <HorizontalLayout>\n          <AppRoutes />\n          <DeleteMessageDialog />\n          <NotificationsPortal />\n        </HorizontalLayout>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\nimport { deleteDialogStateKey, deleteDialogReducer } from \"./deleteDialog\";\nimport {\n  contextRepositoryStateKey,\n  contextRepositoryReducer\n} from \"./contextRepository\";\nimport { repoBranchesStateKey, repoBranchesReducer } from \"./repoBranches\";\nimport { branchCommitsStateKey, branchCommitsReducer } from \"./branchCommits\";\nimport {\n  branchComparisonStateKey,\n  branchComparisonReducer\n} from \"./branchComparison\";\n\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nexport type RootState = StateType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  notifications: frontendComponentsNotifications.notifications,\n  [deleteDialogStateKey]: deleteDialogReducer,\n  [contextRepositoryStateKey]: contextRepositoryReducer,\n  [repoBranchesStateKey]: repoBranchesReducer,\n  [branchCommitsStateKey]: branchCommitsReducer,\n  [branchComparisonStateKey]: branchComparisonReducer\n});\n","import axios from \"axios\";\n\nexport const API_BASE_URL = \"https://api.github.com/\";\n\nexport const initApi = () => {\n  axios.defaults.baseURL = `${API_BASE_URL}`;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport { initApi } from \"./api/apiInit\";\n\ninitApi();\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./rootReducer\";\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(\n      process.env.NODE_ENV === \"production\"\n        ? applyMiddleware(thunk)\n        : applyMiddleware(logger, thunk)\n    )\n  );\n}\n"],"sourceRoot":""}